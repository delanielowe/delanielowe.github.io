{"version":3,"sources":["webpack:///./src/templates/project.js"],"names":["BG","styled","div","props","theme","colors","bg","OuterWrapper","contentPadding","InnerWrapper","maxWidths","project","Project","pageContext","slug","prev","next","data","postNode","images","frontmatter","customSEO","postPath","postSEO","avatar","config","name","title","areas","text","body","nodes","map","image","alt","key","childImageSharp","fluid","src","style","margin","defaultProps","PropTypes","shape","pageQuery"],"mappings":"sOASMA,EAAKC,IAAOC,IAAV,iEAAGD,CAAH,+DACc,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,KAK5CC,EAAeN,IAAOC,IAAV,2EAAGD,CAAH,6CACH,SAAAE,GAAK,OAAIA,EAAMC,MAAMI,iBAI9BC,EAAeR,IAAOC,IAAV,2EAAGD,CAAH,mDAEH,SAAAE,GAAK,OAAOA,EAAMC,MAAMM,UAAUC,QAA7B,OAIdC,EAAU,SAAC,GAAgF,IAAD,IAA7EC,YAAeC,EAA8D,EAA9DA,KAAMC,EAAwD,EAAxDA,KAAMC,EAAkD,EAAlDA,KAAkD,IAA1CC,KAAiBC,EAAyB,EAAlCP,QAAmBQ,EAAe,EAAfA,OACzER,EAAUO,EAASE,YAEzB,OACE,kBAAC,IAAD,CAAQC,WAAS,GACf,kBAAC,IAAD,CAAKC,SAAUR,EAAMI,SAAUA,EAAUK,SAAO,IAChD,kBAAC,IAAD,CACEC,OAAQC,IAAOD,OACfE,KAAMD,IAAOC,KAEbC,MAAOhB,EAAQgB,MACfC,MAAOjB,EAAQiB,MACfC,KAAMX,EAASY,OAEjB,kBAAC9B,EAAD,KACE,kBAACO,EAAD,KACE,kBAACE,EAAD,KACGU,EAAOY,MAAMC,IAAI,SAAAC,GAAK,OACrB,kBAAC,IAAD,CACEC,IAAKD,EAAMP,KACXS,IAAKF,EAAMG,gBAAgBC,MAAMC,IACjCD,MAAOJ,EAAMG,gBAAgBC,MAC7BE,MAAO,CAAEC,OAAQ,eAIvB,kBAAC,IAAD,CAAmBxB,KAAMA,EAAMD,KAAMA,QAOhCH,YAcfA,EAAQ6B,aAAe,CACrB5B,YAAa6B,IAAUC,MAAM,CAC3B3B,KAAM,KACND,KAAM,QAKH,IAAM6B,EAAS","file":"component---src-templates-project-js-ebcd28f00a4ffea7ec6c.js","sourcesContent":["import React from 'react'\r\nimport Img from 'gatsby-image'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql } from 'gatsby'\r\nimport styled from 'styled-components'\r\n\r\nimport { Layout, ProjectHeader, ProjectPagination, SEO } from '../components'\r\nimport config from '../../config/site'\r\n\r\nconst BG = styled.div`\r\n  background-color: ${props => props.theme.colors.bg};\r\n  position: relative;\r\n  padding: 2rem 0 0 0;\r\n`\r\n\r\nconst OuterWrapper = styled.div`\r\n  padding: 0 ${props => props.theme.contentPadding};\r\n  margin: -10rem auto 0 auto;\r\n`\r\n\r\nconst InnerWrapper = styled.div`\r\n  position: relative;\r\n  max-width: ${props => `${props.theme.maxWidths.project}px`};\r\n  margin: 0 auto;\r\n`\r\n\r\nconst Project = ({ pageContext: { slug, prev, next }, data: { project: postNode, images } }) => {\r\n  const project = postNode.frontmatter\r\n\r\n  return (\r\n    <Layout customSEO>\r\n      <SEO postPath={slug} postNode={postNode} postSEO />\r\n      <ProjectHeader\r\n        avatar={config.avatar}\r\n        name={config.name}\r\n        // date={project.date}\r\n        title={project.title}\r\n        areas={project.areas}\r\n        text={postNode.body}\r\n      />\r\n      <BG>\r\n        <OuterWrapper>\r\n          <InnerWrapper>\r\n            {images.nodes.map(image => (\r\n              <Img\r\n                alt={image.name}\r\n                key={image.childImageSharp.fluid.src}\r\n                fluid={image.childImageSharp.fluid}\r\n                style={{ margin: '3rem 0' }}\r\n              />\r\n            ))}\r\n          </InnerWrapper>\r\n          <ProjectPagination next={next} prev={prev} />\r\n        </OuterWrapper>\r\n      </BG>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default Project\r\n\r\nProject.propTypes = {\r\n  pageContext: PropTypes.shape({\r\n    slug: PropTypes.string.isRequired,\r\n    next: PropTypes.object,\r\n    prev: PropTypes.object,\r\n  }),\r\n  data: PropTypes.shape({\r\n    project: PropTypes.object.isRequired,\r\n    images: PropTypes.object.isRequired,\r\n  }).isRequired,\r\n}\r\n\r\nProject.defaultProps = {\r\n  pageContext: PropTypes.shape({\r\n    next: null,\r\n    prev: null,\r\n  }),\r\n}\r\n        // date(formatString: \"DD.MM.YYYY\")\r\n\r\nexport const pageQuery = graphql`\r\n  query($slug: String!, $absolutePathRegex: String!) {\r\n    images: allFile(\r\n      filter: {\r\n        absolutePath: { regex: $absolutePathRegex }\r\n        extension: { regex: \"/(jpg)|(png)|(tif)|(tiff)|(webp)|(jpeg)/\" }\r\n      }\r\n      sort: { fields: name, order: ASC }\r\n    ) {\r\n      nodes {\r\n        name\r\n        childImageSharp {\r\n          fluid(maxWidth: 1600, quality: 90) {\r\n            ...GatsbyImageSharpFluid_withWebp\r\n          }\r\n        }\r\n      }\r\n    }\r\n    project: mdx(fields: { slug: { eq: $slug } }) {\r\n      body\r\n      excerpt\r\n      parent {\r\n        ... on File {\r\n          mtime\r\n          birthtime\r\n        }\r\n      }\r\n      frontmatter {\r\n        cover {\r\n          childImageSharp {\r\n            resize(width: 800) {\r\n              src\r\n            }\r\n          }\r\n        }\r\n        title\r\n        areas\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}